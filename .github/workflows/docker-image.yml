name: Container Image CI

on:
  workflow_dispatch:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  MYGH_TOKEN: ${{ secrets.WASS }}
  ORIGINAL_REPO_NAME: ${{ github.event.repository.name }}
  ORG_NAME: ${{ github.actor }}
  REGISTRY_USER: ${{ vars.DOCKERHUB_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_REGISTRY: registry-1.docker.io
  HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

jobs:
  prepare-head-message:
    runs-on: ubuntu-latest
    outputs:
      HEAD_MESSAGE: ${{ env.HEAD_COMMIT_MESSAGE }}
    steps:
      - run: echo "null"

  get_changed_files:
    runs-on: ubuntu-latest
    needs: prepare-head-message
    if: ${{ ! startsWith(needs.prepare-head-message.outputs.HEAD_MESSAGE, 'Merge branch ') }}
    outputs:
      PYTHON_FILES: ${{ steps.listo_files.outputs.PYTHON_FILES }}
      ANSIBLE_FILES: ${{ steps.listo_files.outputs.ANSIBLE_FILES }}
      PYTHON_FILES_LENGTH: ${{ steps.listo_files.outputs.PYTHON_FILES_LENGTH }}
      ANSIBLE_FILES_LENGTH: ${{ steps.listo_files.outputs.ANSIBLE_FILES_LENGTH }}
      run_build_python: ${{ steps.listo_files.outputs.run_build_python }}
      run_build_ansible: ${{ steps.listo_files.outputs.run_build_ansible }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37
      - name: Get list of files
        id: listo_files
        run: |
          # Get Python files
          PYTHON_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -i python | jq -R -s -c 'split("\n")'[:-1])
          # Get Ansible files
          ANSIBLE_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -i ansible | jq -R -s -c 'split("\n")'[:-1])
          PYTHON_FILES_LENGTH=$(echo ${PYTHON_FILES} | jq '. | length')
          ANSIBLE_FILES_LENGTH=$(echo ${ANSIBLE_FILES} | jq '. | length')
          run_build_python=$([[ ${PYTHON_FILES_LENGTH} -gt 0 ]] && echo 'true' || echo 'false')
          run_build_ansible=$([[ ${ANSIBLE_FILES_LENGTH} -gt 0 ]] && echo 'true' || echo 'false')
          echo -e "Python Files are ${PYTHON_FILES}"
          echo -e "Python Files length ${PYTHON_FILES_LENGTH}"
          echo -e "Run Build Python ${run_build_python}"
          echo -e "Ansible Files are ${ANSIBLE_FILES}"
          echo -e "Ansible Files ${ANSIBLE_FILES_LENGTH}"
          echo -e "Run Build Ansible ${run_build_ansible}"

          echo "PYTHON_FILES=${PYTHON_FILES}" >> $GITHUB_OUTPUT
          echo "PYTHON_FILES_LENGTH=${PYTHON_FILES_LENGTH}" >> $GITHUB_OUTPUT
          echo "run_build_python=${run_build_python}" >> $GITHUB_OUTPUT
          echo "ANSIBLE_FILES=${ANSIBLE_FILES}" >> $GITHUB_OUTPUT
          echo "ANSIBLE_FILES_LENGTH=${ANSIBLE_FILES_LENGTH}" >> $GITHUB_OUTPUT
          echo "run_build_ansible=${run_build_ansible}" >> $GITHUB_OUTPUT

  build_python:
    runs-on: ubuntu-latest
    needs: [prepare-head-message, get_changed_files]
    if: needs.get_changed_files.outputs.run_build_python == 'true'
    strategy:
      matrix:
        py_img: ${{ fromJson(needs.get_changed_files.outputs.PYTHON_FILES) }}
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Build the Python image
        env:
          img_file: ${{ matrix.py_img }}
        run: |
          read -r PRODUCT VERSION <<<$(basename $img_file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
          podman build --build-arg PYVERSION=$(echo ${VERSION}) . --file $img_file --tag ${PRODUCT}
          podman tag ${PRODUCT} ${{ env.IMAGE_REGISTRY }}/${{ env.ORG_NAME }}/${PRODUCT}:${VERSION}
          podman push ${{ env.IMAGE_REGISTRY }}/${{ env.ORG_NAME }}/${PRODUCT}:${VERSION}

  build_ansible:
    runs-on: ubuntu-latest
    needs: [prepare-head-message, get_changed_files, build_python]
    if: |
      always() &&
      needs.get_changed_files.outputs.run_build_ansible == 'true' &&
      (needs.build_python.result == 'success' || needs.build_python.result == 'skipped')
    strategy:
      matrix:
        an_img: ${{ fromJson(needs.get_changed_files.outputs.ANSIBLE_FILES) }}
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Build the Ansible image
        env:
          img_file: ${{ matrix.an_img }}
        run: |
          read -r PRODUCT VERSION <<<$(basename $img_file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
          podman build --build-arg ANSVERSION=$(echo ${VERSION}) . --file $img_file --tag ${PRODUCT}
          podman tag ${PRODUCT} ${{ env.IMAGE_REGISTRY }}/${{ env.ORG_NAME }}/${PRODUCT}:${VERSION}
          podman push ${{ env.IMAGE_REGISTRY }}/${{ env.ORG_NAME }}/${PRODUCT}:${VERSION}

  test_deploy_linux:
    needs: [prepare-head-message, get_changed_files, build_ansible]
    if: needs.get_changed_files.outputs.run_build_ansible == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        an_img: ${{ fromJson(needs.get_changed_files.outputs.ANSIBLE_FILES) }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-linux-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        env:
          img_file: ${{ matrix.an_img }}
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          read -r PRODUCT VERSION <<<$(basename $img_file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
          sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
          bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')

  test_deploy_simulator:
    needs: [prepare-head-message, get_changed_files, build_ansible]
    if: needs.get_changed_files.outputs.run_build_ansible == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        an_img: ${{ fromJson(needs.get_changed_files.outputs.ANSIBLE_FILES) }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-simulator-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        env:
          img_file: ${{ matrix.an_img }}
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          read -r PRODUCT VERSION <<<$(basename $img_file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
          sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
          bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')

  test_deploy_snapshots:
    needs: [prepare-head-message, get_changed_files, build_ansible]
    if: needs.get_changed_files.outputs.run_build_ansible == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        an_img: ${{ fromJson(needs.get_changed_files.outputs.ANSIBLE_FILES) }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-snapshots-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        env:
          img_file: ${{ matrix.an_img }}
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          read -r PRODUCT VERSION <<<$(basename $img_file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
          sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
          bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')

  test_deploy_em7lic:
    needs: [prepare-head-message, get_changed_files, build_ansible]
    if: needs.get_changed_files.outputs.run_build_ansible == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        an_img: ${{ fromJson(needs.get_changed_files.outputs.ANSIBLE_FILES) }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-em7lic-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        env:
          img_file: ${{ matrix.an_img }}
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          read -r PRODUCT VERSION <<<$(basename $img_file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
          sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
          bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')

  test_deploy_cms_build:
    needs: [prepare-head-message, get_changed_files, build_ansible]
    if: needs.get_changed_files.outputs.run_build_ansible == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        an_img: ${{ fromJson(needs.get_changed_files.outputs.ANSIBLE_FILES) }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-cms-build-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        env:
          img_file: ${{ matrix.an_img }}
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          read -r PRODUCT VERSION <<<$(basename $img_file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
          sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
          bash -x Bash/play_deploy.sh --envname cust_build_info --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')

  check_jobs_status:
    runs-on: ubuntu-latest
    needs: [prepare-head-message, build_python, build_ansible, test_deploy_linux, test_deploy_simulator, test_deploy_snapshots, test_deploy_em7lic, test_deploy_cms_build]
    if: always()
    outputs:
      run_create_release: ${{ steps.release_decision.outputs.run_create_release }}
    steps:
      - name: release_decision
        id: release_decision
        run: |
          if ${{ ! startsWith(needs.prepare-head-message.outputs.HEAD_MESSAGE, 'Merge branch ') &&
          (needs.build_python.result == 'success' || needs.build_python.result == 'skipped') &&
          (needs.build_ansible.result == 'success' || needs.build_ansible.result == 'skipped') &&
          (needs.test_deploy_linux.result == 'success' || needs.test_deploy_linux.result == 'skipped') &&
          (needs.test_deploy_simulator.result == 'success' || needs.test_deploy_simulator.result == 'skipped') &&
          (needs.test_deploy_snapshots.result == 'success' || needs.test_deploy_snapshots.result == 'skipped') &&
          (needs.test_deploy_em7lic.result == 'success' || needs.test_deploy_em7lic.result == 'skipped') &&
          (needs.test_deploy_cms_build.result == 'success' || needs.test_deploy_cms_build.result == 'skipped') }}
          then
            run_create_release='true'
          else
            run_create_release='false'
          fi
          echo "run_create_release=${run_create_release}" >> $GITHUB_OUTPUT

  create_release:
    runs-on: ubuntu-latest
    needs: check_jobs_status
    if: |
      always() &&
      needs.check_jobs_status.outputs.run_create_release == 'true'
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Configure Git
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
          git remote set-url origin https://${{ env.ORG_NAME }}:${{ env.MYGH_TOKEN }}@github.com/${{ env.ORG_NAME }}/${{ env.ORIGINAL_REPO_NAME }}.git
      - name: Get Remote Updates
        run: |
          git remote update
      - name: Update Local develop Branch
        run: |
          git pull origin develop
      - name: Get The Last Tag
        id: lt
        uses: wtout/get-last-tag-action@v1
      - name: Show the Action Tag
        run: |
          echo "The action tag is ${{ steps.lt.outputs.last-tag }}"
      - name: Get The Next Tag
        id: nt
        uses: wtout/get-next-tag-action@v4
        with:
          current-tag: ${{ steps.lt.outputs.last-tag }}
      - name: Create a Release Branch
        run: |
          git checkout -b release/${{ steps.nt.outputs.next-tag }} origin/develop
      - name: Switch to master branch
        run: |
          git checkout master
      - name: Update Local master Branch
        run: |
          git pull origin master
      - name: Test Merge
        run: |
          git merge --no-commit --no-ff release/${{ steps.nt.outputs.next-tag }} --allow-unrelated-histories -X theirs || exit 0
          if [[ -f .git/MERGE_HEAD ]]
          then
            git merge --abort
          fi
      - name: Merge release/${{ steps.nt.outputs.next-tag }} into master
        run: |
          git merge --no-ff release/${{ steps.nt.outputs.next-tag }} --allow-unrelated-histories -X theirs
      - name: Create New Tag
        run: |
          git tag -a ${{ steps.nt.outputs.next-tag }} -m "Create release tag ${{ steps.nt.outputs.next-tag }}"
      - name: Push master Branch And Tags to Remote Repo
        run: |
          git push origin master
          git push origin --tags
      - name: Switch to develop branch
        run: |
          git checkout develop
      - name: Merge master into develop
        run: |
          git merge --no-ff master
      - name: Push develop Branch To Remote Repo
        run: |
          git push origin develop
