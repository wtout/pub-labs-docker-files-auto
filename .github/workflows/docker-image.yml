name: Container Image CI

on:
  workflow_dispatch:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  MYGH_TOKEN: ${{ secrets.WASS }}
  ORIGINAL_REPO_NAME: ${{ github.event.repository.name }}
  ORG_NAME: ${{ github.actor }}
  REGISTRY_USER: ${{ vars.DOCKERHUB_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_REGISTRY: registry-1.docker.io

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ANSIBLE_FILES: ${{ steps.listo_files.outputs.ANSIBLE_FILES }}
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37
      - name: Get list of files
        id: listo_files
        run: |
          # Get Python files
          PYTHON_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -i python | tr '\n' ' ')
          # Get Ansible files
          ANSIBLE_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -i ansible | tr '\n' ' ')
          echo -e "Python Files are ${PYTHON_FILES}"
          echo -e "Ansible Files are ${ANSIBLE_FILES}"
          echo "PYTHON_FILES=${PYTHON_FILES}" >> $GITHUB_OUTPUT
          echo "ANSIBLE_FILES=${ANSIBLE_FILES}" >> $GITHUB_OUTPUT
      - name: Build the Docker image
        run: |
          for file in ${{ steps.listo_files.outputs.PYTHON_FILES }}${{ steps.listo_files.outputs.ANSIBLE_FILES }}
          do
            read -r PRODUCT VERSION <<<$(basename $file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
            podman build . --file $file --tag ${PRODUCT}
            podman tag ${PRODUCT} ${{ env.IMAGE_REGISTRY }}/${{ env.ORG_NAME }}/${PRODUCT}:${VERSION}
            podman push ${{ env.IMAGE_REGISTRY }}/${{ env.ORG_NAME }}/${PRODUCT}:${VERSION}
          done

  test_deploy_linux:
    if: needs.build.outputs.ANSIBLE_FILES != ''
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-linux-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          for file in ${{ needs.build.outputs.ANSIBLE_FILES }}
          do
            read -r PRODUCT VERSION <<<$(basename $file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
            sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
            bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')
          done

  test_deploy_simulator:
    if: needs.build.outputs.ANSIBLE_FILES != ''
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-simulator-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          for file in ${{ needs.build.outputs.ANSIBLE_FILES }}
          do
            read -r PRODUCT VERSION <<<$(basename $file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
            sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
            bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')
          done

  test_deploy_snapshots:
    if: needs.build.outputs.ANSIBLE_FILES != ''
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-snapshots-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          for file in ${{ needs.build.outputs.ANSIBLE_FILES }}
          do
            read -r PRODUCT VERSION <<<$(basename $file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
            sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
            bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')
          done

  test_deploy_em7lic:
    if: needs.build.outputs.ANSIBLE_FILES != ''
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-labs-em7lic-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          for file in ${{ needs.build.outputs.ANSIBLE_FILES }}
          do
            read -r PRODUCT VERSION <<<$(basename $file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
            sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
            bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')
          done

  test_deploy_cms_build:
    if: needs.build.outputs.ANSIBLE_FILES != ''
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/pub-cms-build-auto
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Create /data/Packages directory
        run: |
          sudo mkdir -p /data/Packages
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          for file in ${{ needs.build.outputs.ANSIBLE_FILES }}
          do
            read -r PRODUCT VERSION <<<$(basename $file | sed -e 's|^\(.*\)-\(.*\)\.Dockerfile|\1 \2|')
            sed -i "s/^\(ANSIBLE_VERSION=\).*$/\1'${VERSION}'/" Bash/common_parameters.sh
            bash -x Bash/play_deploy.sh --envname cust_build_info --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')
          done

  create_release:
    if: |
      always() &&
      needs.build.result == 'success' &&
      (needs.test_deploy_linux.result == 'success' || needs.test_deploy_linux.result == 'skipped') &&
      (needs.test_deploy_simulator.result == 'success' || needs.test_deploy_simulator.result == 'skipped') &&
      (needs.test_deploy_snapshots.result == 'success' || needs.test_deploy_snapshots.result == 'skipped') &&
      (needs.test_deploy_em7lic.result == 'success' || needs.test_deploy_em7lic.result == 'skipped') &&
      (needs.test_deploy_cms_build.result == 'success' || needs.test_deploy_cms_build.result == 'skipped')
    runs-on: ubuntu-latest
    needs: [test_deploy_linux, test_deploy_simulator, test_deploy_snapshots, test_deploy_em7lic, test_deploy_cms_build]
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Configure GIT
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
          sed  -i "s|\(^.*url.*//\).*\(github.*$\)|\1${{ env.ORG_NAME }}:${{ env.MYGH_TOKEN }}@\2|" .git/config
      - name: Fetch All Remote Updates
        run: |
          git remote update
      - name: Update Local develop Branch
        run: |
          git pull origin develop
      - name: Read Current Tag
        id: tf
        run: |
          read -r P1 P2 P3 <<<$(git tag | sort -V | tail -1 | tr '.' ' ')
          echo "P1=$P1" >> $GITHUB_OUTPUT
          echo "P2=$P2" >> $GITHUB_OUTPUT
          echo "P3=$P3" >> $GITHUB_OUTPUT
      - name: Determine the New Tag Fields
        id: ntf
        run: |
          P1=${{ steps.tf.outputs.P1 }}
          P2=${{ steps.tf.outputs.P2 }}
          P3=${{ steps.tf.outputs.P3 }}
          if [[ "${P3}" -lt 20 ]]
          then
            P3=$((P3 + 1))
          elif [[ "${P2}" -lt 20 ]]
          then
            P3=0
            P2=$((P2 + 1))
          else
            P3=0
            P2=0
            P1=$((P1 + 1))
          fi
          echo "P1=$P1" >> $GITHUB_OUTPUT
          echo "P2=$P2" >> $GITHUB_OUTPUT
          echo "P3=$P3" >> $GITHUB_OUTPUT
      - name: Define New Tag
        id: nt
        run: |
          P1=${{ steps.ntf.outputs.P1 }}
          P2=${{ steps.ntf.outputs.P2 }}
          P3=${{ steps.ntf.outputs.P3 }}
          NEW_TAG=${P1:=0}.${P2:=0}.${P3:=0}
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
      - name: Create a Release Branch
        run: |
          git checkout -b release/${{ steps.nt.outputs.NEW_TAG }} origin/develop
      - name: Switch to master branch
        run: |
          git checkout master
      - name: Update Local master Branch
        run: |
          git pull origin master
      - name: Test Merge
        run: |
          git merge --no-commit --no-ff release/${{ steps.nt.outputs.NEW_TAG }} --allow-unrelated-histories -X theirs && git merge --abort
      - name: Merge release/${{ steps.nt.outputs.NEW_TAG }} into master
        run: |
          git merge release/${{ steps.nt.outputs.NEW_TAG }} --allow-unrelated-histories -X theirs
      - name: Create New Tag
        run: |
          git tag -a ${{ steps.nt.outputs.NEW_TAG }} -m "Create release tag ${{ steps.nt.outputs.NEW_TAG }}"
      - name: Push master Branch And Tags to Remote Repo
        run: |
          git push origin master
          git push origin --tags
      - name: Switch to develop branch
        run: |
          git checkout develop
      - name: Merge release/${{ steps.nt.outputs.NEW_TAG }} into develop
        run: |
          git merge release/${{ steps.nt.outputs.NEW_TAG }} --allow-unrelated-histories -X theirs
      - name: Push develop Branch To Remote Repo
        run: |
          git push origin develop
